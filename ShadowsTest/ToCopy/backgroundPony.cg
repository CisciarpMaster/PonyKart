//----------------------------------------------------------------------

//
// For the body
//

void body_vp(float2 uv 				: TEXCOORD0,
			 float2 uvCM			: TEXCOORD1,
			 float4 Position	 	: POSITION,
			 float4 Normal  		: NORMAL,
			
			 out float4 oPosition   : POSITION,
			 out float2 oUv		 	: TEXCOORD0,
			 out float2 oUvCutieMark: TEXCOORD1,
		  
			 out float3 WorldNormal : TEXCOORD2,
			 out float3 WorldView   : TEXCOORD3,

			 out float3 oLightPosition   : TEXCOORD4,

			 uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
			 uniform float4x4 WorldXf,
			 uniform float4x4 ViewIXf,
			 uniform float4x4 WvpXf,
			 uniform float4 lightPosition		  
) {

	// Pass though world space normal
    WorldNormal = mul(WorldITXf, Normal).xyz;

    float4 Pw = mul(WorldXf, Position);
    WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw.xyz);
    oPosition = mul(WvpXf, Position);
	oLightPosition = lightPosition.xyz;
	
	// get our new UV coordinates
	oUv = uv;
	oUvCutieMark = uvCM;
}

//----------------------------------------------------------------------

float4 body_ps(	float2 uv 			: TEXCOORD0,
				float2 uvCM			: TEXCOORD1,
				
				float3 WorldNormal 	: TEXCOORD2,
				float3 WorldView   	: TEXCOORD3,
				float3 LightDirection : TEXCOORD4,
			   
				uniform float3 BodyColour,
				uniform float3 AOColour,
				uniform sampler2D AOTexture : register(s0),
				uniform sampler2D CutieMarkTexture : register(s1),
			   
				uniform float3 Ambient,
				uniform float4 FogColour,
				uniform float4 FogParams
) : COLOR {
	// Calculate edge lighting
	
	// 0.3 is the old Alpha parameter from the fresnelTex shader
	// 3 is the old GlowExpon
    float edge = pow(1.0f - abs(dot(normalize(WorldNormal), normalize(WorldView))), 3) * 0.3f; 

	// Calculate diffuse lighting
	float light = saturate(saturate(dot(WorldNormal, LightDirection) * 0.5f + 0.5f) * (1 - Ambient) + Ambient);
	
	// Sample diffuse textures
	// second argument: .xy = coordinates to perform the lookup, .w = level of detail bias value (?)
	float4 textureAO = tex2Dbias(AOTexture, float4(uv.xy, 0, -0.5f)); // this one has no alpha
	float4 textureCM = tex2Dbias(CutieMarkTexture, float4(uvCM.xy, 0, -0.5f));
	
	float3 a_BodyColour = BodyColour * (1 - textureAO.r);
	float3 a_TextureAO = (AOColour * textureAO.r);
	
	float3 texture = ((a_BodyColour + a_TextureAO) * (1 - textureCM.a)) + (textureCM.rgb * textureCM.a);
	
	// Calculate result
    float3 result = (edge * texture) + texture * light;


	float dist = length(WorldView);
	result = lerp(result, FogColour.xyz, saturate((dist - FogParams.y) * FogParams.w) * FogColour.a);
	
	return float4(result, 1);
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//
// For wings
//

void wings_vp(float2 uv 			: TEXCOORD0,
			 float4 Position	 	: POSITION,
			 float4 Normal  		: NORMAL,
			
			 out float4 oPosition   : POSITION,
			 out float2 oUv		 	: TEXCOORD0,
		  
			 out float3 WorldNormal : TEXCOORD1,
			 out float3 WorldView   : TEXCOORD2,

			 out float3 oLightPosition   : TEXCOORD3,

			 uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
			 uniform float4x4 WorldXf,
			 uniform float4x4 ViewIXf,
			 uniform float4x4 WvpXf,
			 uniform float4 lightPosition		  
) {

	// Pass though world space normal
    WorldNormal = mul(WorldITXf, Normal).xyz;

    float4 Pw = mul(WorldXf, Position);
    WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw.xyz);
    oPosition = mul(WvpXf, Position);
	oLightPosition = lightPosition.xyz;
	
	// get our new UV coordinates
	oUv = uv;
}

//----------------------------------------------------------------------

float4 wings_ps(float2 uv 			: TEXCOORD0,
				
				float3 WorldNormal 	: TEXCOORD1,
				float3 WorldView   	: TEXCOORD2,
				float3 LightDirection : TEXCOORD3,
			   
				uniform float3 BodyColour,
				uniform float3 AOColour,
				uniform sampler2D AOTexture : register(s0),
			   
				uniform float3 Ambient,
				uniform float4 FogColour,
				uniform float4 FogParams
) : COLOR {
	// Calculate edge lighting
	
	// 0.3 is the old Alpha parameter from the fresnelTex shader
	// 3 is the old GlowExpon
    float edge = pow(1.0f - abs(dot(normalize(WorldNormal), normalize(WorldView))), 3) * 0.3f; 

	// Calculate diffuse lighting
	float light = saturate(saturate(dot(WorldNormal, LightDirection) * 0.5f + 0.5f) * (1 - Ambient) + Ambient);
	
	// Sample diffuse textures
	// second argument: .xy = coordinates to perform the lookup, .w = level of detail bias value (?)
	float4 textureAO = tex2Dbias(AOTexture, float4(uv.xy, 0, -0.5f)); // this one has no alpha
	
	float3 texture = (BodyColour * (1 - textureAO.r)) + (AOColour * textureAO.r);
	
	// Calculate result
    float3 result = (edge * texture) + texture * light;


	float dist = length(WorldView);
	result = lerp(result, FogColour.xyz, saturate((dist - FogParams.y) * FogParams.w) * FogColour.a);
	
	return float4(result, 1);
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//
// For wings
//

void eyes_vp(float2 uv 				: TEXCOORD0,
			 float4 Position	 	: POSITION,
			 float4 Normal  		: NORMAL,
			
			 out float4 oPosition   : POSITION,
			 out float2 oUv		 	: TEXCOORD0,
		  
			 out float3 WorldNormal : TEXCOORD1,
			 out float3 WorldView   : TEXCOORD2,

			 out float3 oLightPosition   : TEXCOORD3,

			 uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
			 uniform float4x4 WorldXf,
			 uniform float4x4 ViewIXf,
			 uniform float4x4 WvpXf,
			 uniform float4 lightPosition		  
) {

	// Pass though world space normal
    WorldNormal = mul(WorldITXf, Normal).xyz;

    float4 Pw = mul(WorldXf, Position);
    WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw.xyz);
    oPosition = mul(WvpXf, Position);
	oLightPosition = lightPosition.xyz;

	oUv = uv;
}

//----------------------------------------------------------------------

float4 eyes_ps( float2 uv 			: TEXCOORD0,
				
				float3 WorldNormal 	: TEXCOORD1,
				float3 WorldView   	: TEXCOORD2,
				float3 LightDirection : TEXCOORD3,
			   
				uniform float3 BottomIrisColour,
				uniform float3 TopIrisColour,
				uniform float3 HighlightColour,
				uniform sampler2D EyeTexture : register(s0),
				uniform sampler2D OverlayTexture : register(s1),
			   
				uniform float3 Ambient,
				uniform float4 FogColour,
				uniform float4 FogParams
) : COLOR {
	// Calculate diffuse lighting
	float light = saturate(saturate(dot(WorldNormal, LightDirection) * 0.5f + 0.5f) * (1 - Ambient) + Ambient);
	
	// Sample diffuse textures
	// second argument: .xy = coordinates to perform the lookup, .w = level of detail bias value (?)
	float4 eyeTex = tex2Dbias(EyeTexture, float4(uv.xy, 0, -0.5f));
	float4 overlayTex = tex2Dbias(OverlayTexture, float4(uv.xy, 0, -0.5f));
	
	// First make the color of the iris
	float3 eyeColour = (BottomIrisColour * eyeTex.r) + (TopIrisColour * eyeTex.g) + (HighlightColour * eyeTex.b);
	// then we overlay the shine and pupil
	float3 texture = (eyeColour * (1 - overlayTex.a)) + (overlayTex.rgb * overlayTex.a);
	
	float dist = length(WorldView);
	float3 result = lerp(texture * light, FogColour.xyz, saturate((dist - FogParams.y) * FogParams.w) * FogColour.a);
	
	return float4(result, 1);
}