//----------------------------------------------------------------------

//
// Vertex shader
//

void main_vp(float2 uv 				: TEXCOORD0,
			 float4 Position	 	: POSITION,
			 float4 Normal  		: NORMAL,
		  
			 uniform float uScale,
			 uniform float vScale,
			
			 out float4 oPosition   : POSITION,
			 out float2 oUv		 	: TEXCOORD0,
		  
			 out float3 WorldNormal : TEXCOORD1,
			 out float3 WorldView   : TEXCOORD2,

			 out float3 oLightPosition   : TEXCOORD3,

			 uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
			 uniform float4x4 WorldXf,
			 uniform float4x4 ViewIXf,
			 uniform float4x4 WvpXf,
			 uniform float4 lightPosition		  
) {

	// Pass though world space normal
    WorldNormal = mul(WorldITXf, Normal).xyz;

    float4 Pw = mul(WorldXf, Position);
    WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw.xyz);
    oPosition = mul(WvpXf, Position);
	oLightPosition = lightPosition.xyz;
	
	// get our new UV coordinates
	oUv.x = uv.x * uScale;
	oUv.y = uv.y * vScale;
}

//----------------------------------------------------------------------

// 
// Pixel shader
//

float4 main_ps(	float2 uv 			: TEXCOORD0,
				float3 WorldNormal 	: TEXCOORD1,
				float3 WorldView   	: TEXCOORD2,
				float3 LightDirection : TEXCOORD3,
			   
				uniform sampler2D tex : register(s0),
			   
				uniform float3 GlowColour,
				uniform float TextureGlowStrength,
				uniform float GlowExpon,
				uniform float Alpha,
				uniform float3 Ambient,
				uniform float4 FogColour,
				uniform float4 FogParams )
: COLOR
{
	// Calculate edge lighting
    float3 Nn = normalize(WorldNormal);
	float dist = length( WorldView );
    float3 Vn = normalize(WorldView);
    float edge = pow(1.0 - abs( dot(Nn, Vn) ), GlowExpon) * Alpha;

	// Calculate diffuse lighting
	float light = saturate( saturate( dot( WorldNormal, LightDirection ) * 0.5f + 0.5f ) * ( 1 - Ambient ) + Ambient );
	
	// Sample diffuse texture
	float4 texture = tex2Dbias(tex, float4( uv.xy, 0, -0.5f ) );
	
	// Calculate result
    float3 result = ( edge * texture.rgb * TextureGlowStrength ) + ( edge * GlowColour )  + texture.rgb * light;

	/*float cutoff = 0.075f;
	clip( texture.a - cutoff );
	texture.a = ( texture.a - cutoff ) * ( 1.0f / ( 1.0f - cutoff ) );*/

	result = lerp( result, FogColour.xyz, saturate( ( dist - FogParams.y ) * FogParams.w ) * FogColour.a );
	
	return float4(result, texture.a);
}