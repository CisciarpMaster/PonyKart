//----------------------------------------------------------------------

//
// Vertex shader
//

void main_vp(float2 uv 				: TEXCOORD0,
			float4 Position	 	: POSITION,
			float4 Normal  		: NORMAL,
		  
			uniform float uScale,
			uniform float vScale,
		  
			out float4 oPosition   : POSITION,
			out float2 oUv		 	: TEXCOORD0,
		  
			out float3 WorldNormal : TEXCOORD1,
			out float3 WorldView   : TEXCOORD2,

			uniform float4x4 WorldITXf,
			uniform float4x4 WorldXf,
			uniform float4x4 ViewIXf,
			uniform float4x4 ViewProjection
) {
    WorldNormal = mul(WorldITXf, Normal).xyz;
	
    float4 Pw = mul(WorldXf, Position);
    WorldView = float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw.xyz;
	WorldView = normalize( WorldView );
    
	float len = length( float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw.xyz );
	Pw.xyz += WorldNormal.xyz * 0.0025f * len;
	Pw.xyz += WorldView * 0.0025f * len * 1.5f;
	
	oPosition = mul(ViewProjection, Pw);
	
	// get our new UV coordinates
	oUv.x = uv.x * uScale;
	oUv.y = uv.y * vScale;
}

void EdgeVP(float4 position : POSITION,
			float4 normal : NORMAL0,
			out float4 oPos : POSITION,
			out float4 oColor : COLOR,
			uniform float4 edgeColor,
			uniform float4 eyePosition,
			uniform float scale,
			uniform float edgeScale,
			uniform float4x4 worldViewProj)
{
	float4 E = normalize(eyePosition);
	position = mul(worldViewProj, position - scale*E);
 
	normal.w = 0;
	normal = normalize(mul(worldViewProj, normal));
 
	position += ((scale / 8.0f)+1.0) * edgeScale * float4(normal.xy, 0, 0);
 
	oPos=position;
	oColor=edgeColor / 255.0f;
}

//----------------------------------------------------------------------

//
// Pixel shader
//

float4 main_ps(float2 uv 			: TEXCOORD0,
			    float3 WorldNormal 	: TEXCOORD1,
			    float3 WorldView   	: TEXCOORD2,
			   
			    uniform sampler2D tex : register(s0),
			
			    //uniform float3 GlowColour,
			    //uniform float GlowExpon,
			    //uniform float Alpha,
				uniform float4 lightPosition,
				uniform float3 Ambient,
				uniform float3 OutlineColour)
: COLOR
{
	float4 texture = tex2D(tex, uv.xy);

	float3 light = saturate( saturate( dot( WorldNormal, lightPosition ) * 0.5f + 0.5f ) * ( 1 - Ambient ) + Ambient );

    float3 result = OutlineColour / 255.0f * light;

	return float4(result, texture.a);
}